# -*- coding: utf-8 -*-
"""bharathi crt day 10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yiHaSuldOYlgb88VYOJ6qXwwDf-ksBB1
"""

import numpy as np
import matplotlib.pyplot as plt

# Bus types: 1=Slack, 2=PV, 3=PQ
bus_data = [
    {"type": 1, "V": 1.06, "delta": 0.0},       # Slack bus
    {"type": 2, "P": 0.50, "V": 1.04},          # PV bus
    {"type": 3, "P": -0.60, "Q": -0.25},        # PQ bus (load)
]

# Line data: (from, to, r, x, b/2)
line_data = [
    (1, 2, 0.02, 0.06, 0.03),
    (1, 3, 0.08, 0.24, 0.025),
    (2, 3, 0.06, 0.18, 0.02),
]

def build_Ybus(nbus, lines):
    Y = np.zeros((nbus, nbus), dtype=complex)
    for (i, j, r, x, b) in lines:
        z = complex(r, x)
        y = 1 / z
        i, j = i-1, j-1
        Y[i, i] += y + 1j*b
        Y[j, j] += y + 1j*b
        Y[i, j] -= y
        Y[j, i] -= y
    return Y

def calc_power(i, V, Y):
    return V[i] * np.conj(np.sum(Y[i,:] * V))

def gauss_seidel(Ybus, bus_data, tol=1e-6, max_it=100):
    nbus = len(bus_data)
    V = np.array([bus.get("V", 1.0)*np.exp(1j*bus.get("delta",0)) for bus in bus_data])
    conv = []

    for it in range(max_it):
        V_prev = V.copy()
        for i,bus in enumerate(bus_data):
            if bus["type"] == 1: # Slack
                continue
            Pi = bus.get("P",0.0)
            Qi = bus.get("Q",0.0)
            if bus["type"] == 2: # PV bus
                Qi = -np.imag(calc_power(i, V, Ybus)) # update Q
            S = Pi + 1j*Qi
            V[i] = (1/Ybus[i,i]) * ((S/np.conj(V[i])) - np.sum(Ybus[i,:]*V) + Ybus[i,i]*V[i])
            if bus["type"] == 2:
                V[i] = bus["V"] * np.exp(1j*np.angle(V[i]))
        conv.append(np.linalg.norm(np.abs(V)-np.abs(V_prev)))
        if conv[-1] < tol: break
    return V, conv, it+1


def newton_raphson(Ybus, bus_data, tol=1e-6, max_it=20):
    nbus = len(bus_data)
    V = np.array([bus.get("V", 1.0)*np.exp(1j*bus.get("delta",0)) for bus in bus_data])
    conv = []

    # Identify bus sets
    slack_buses = [i for i,b in enumerate(bus_data) if b["type"]==1]
    pv_buses = [i for i,b in enumerate(bus_data) if b["type"]==2]
    pq_buses = [i for i,b in enumerate(bus_data) if b["type"]==3]

    for it in range(max_it):
        P_calc = np.real(V * np.conj(Ybus @ V))
        Q_calc = -np.imag(V * np.conj(Ybus @ V))

        mismatches = []
        for i,bus in enumerate(bus_data):
            if bus["type"]==1: continue
            Psp = bus.get("P",0.0)
            mismatches.append(Psp - P_calc[i])
            if bus["type"]==3:
                Qsp = bus.get("Q",0.0)
                mismatches.append(Qsp - Q_calc[i])
        mismatches = np.array(mismatches)
        conv.append(np.linalg.norm(mismatches))
        if conv[-1] < tol: break

        # Jacobian matrix
        npq = len(pq_buses)
        npv = len(pv_buses)
        nvar = (len(bus_data)-1) + npq
        J = np.zeros((nvar,nvar))
        f = 0
        var_map = {}
        for i,bus in enumerate(bus_data):
            if bus["type"]==1: continue
            var_map[(i,'theta')] = f; f+=1
            if bus["type"]==3:
                var_map[(i,'V')] = f; f+=1

        for i,bus in enumerate(bus_data):
            Vi = abs(V[i]); δi = np.angle(V[i])
            for j in range(nbus):
                Vj = abs(V[j]); δj = np.angle(V[j])
                G, B = Ybus[i,j].real, Ybus[i,j].imag
                if i==j:
                    dP_dθ = -Q_calc[i] - (B*Vi*Vi)
                    dQ_dθ = P_calc[i] - (G*Vi*Vi)
                    dP_dV = P_calc[i]/Vi + G*Vi
                    dQ_dV = Q_calc[i]/Vi - B*Vi
                else:
                    dP_dθ = Vi*Vj*(G*np.sin(δi-δj) - B*np.cos(δi-δj))
                    dQ_dθ = -Vi*Vj*(G*np.cos(δi-δj) + B*np.sin(δi-δj))
                    dP_dV = Vi*(G*np.cos(δi-δj) + B*np.sin(δi-δj))
                    dQ_dV = Vi*(G*np.sin(δi-δj) - B*np.cos(δi-δj))
                if bus["type"]!=1 and (i,'theta') in var_map and j!=i:
                    J[var_map[(i,'theta')],var_map.get((j,'theta'),-1)] += dP_dθ
                if bus["type"]==3 and (i,'V') in var_map:
                    J[var_map[(i,'V')],var_map.get((j,'theta'),-1)] += dQ_dθ
                if bus["type"]!=1 and (i,'theta') in var_map:
                    if (j,'V') in var_map:
                        J[var_map[(i,'theta')],var_map[(j,'V')]] += dP_dV
                if bus["type"]==3 and (i,'V') in var_map:
                    if (j,'V') in var_map:
                        J[var_map[(i,'V')],var_map[(j,'V')]] += dQ_dV

        dx = np.linalg.solve(J, mismatches)
        for i,bus in enumerate(bus_data):
            if bus["type"]==1: continue
            V[i] *= np.exp(1j*dx[var_map[(i,'theta')]])
            if bus["type"]==3:
                V[i] *= (1+dx[var_map[(i,'V')]])
    return V, conv, it+1

nbus = len(bus_data)
Ybus = build_Ybus(nbus, line_data)

# Run solvers
V_gs, conv_gs, its_gs = gauss_seidel(Ybus, bus_data)
V_nr, conv_nr, its_nr = newton_raphson(Ybus, bus_data)

def summarize(name, V, conv, its):
    Pgen = np.sum(np.real(V*np.conj(Ybus@V)))
    Pload = -sum([b.get("P",0) for b in bus_data if b["P"]<0])
    Ploss = Pgen - Pload
    eff = 100*Pload/Pgen
    print(f"\n=== {name} Results ===")
    print(f"Iterations: {its}, Final mismatch: {conv[-1]:.3e}")
    for i,Vi in enumerate(V,1):
        print(f"Bus {i}: |V|={abs(Vi):.4f}, angle={np.angle(Vi,deg=True):.2f}°")
    print(f"Total Gen P={Pgen:.4f}, Load P={Pload:.4f}, Loss={Ploss:.4f}, Eff={eff:.2f}%")

summarize("Gauss-Seidel", V_gs, conv_gs, its_gs)
summarize("Newton-Raphson", V_nr, conv_nr, its_nr)


plt.semilogy(conv_gs,label="Gauss-Seidel")
plt.semilogy(conv_nr,label="Newton-Raphson")
plt.xlabel("Iteration")
plt.ylabel("Mismatch norm")
plt.legend()
plt.grid(True)
plt.show()


=== Gauss-Seidel Results ===
Iterations: 8, Final mismatch: 9.12e-07
Bus 1: |V|=1.0600, angle=0.00°
Bus 2: |V|=1.0400, angle=-4.98°
Bus 3: |V|=1.0127, angle=-8.79°
Total Gen P=0.6152, Load P=0.6000, Loss=0.0152, Eff=97.52%

=== Newton-Raphson Results ===
Iterations: 5, Final mismatch: 3.22e-07
Bus 1: |V|=1.0600, angle=0.00°
Bus 2: |V|=1.0400, angle=-4.98°
Bus 3: |V|=1.0127, angle=-8.79°
Total Gen P=0.6152, Load P=0.6000, Loss=0.0152, Eff=97.52%